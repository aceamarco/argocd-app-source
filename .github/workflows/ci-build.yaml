name: Integration Tests
on:
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - 'master'

jobs:
  build-docker:
    name: Ensure Docker image builds
    env:
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Golang
        uses: actions/setup-go@v2
        with:
          go-version: '1.16.4'
      - name: Build Docker image
        run: |
          make quay-build
  
  check-go:
    name: Ensure Go modules are valid
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Golang
        uses: actions/setup-go@v2
        with:
          go-version: '1.16.4'
      - name: Download all Go modules
        run: |
          go mod download
      - name: Check for tidyness of go.mod and go.sum
        run: |
          go mod tidy
          git diff --exit-code -- .

  check-manifests:
    name: Verify generated manifests (ensures that all manifest changes are checked in)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Regenerate the manifests, git diff should report no changes.
        run: |
          make manifests
          git diff --exit-code -- .
  
  build-go:
    name: Build & cache Go code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Golang
        uses: actions/setup-go@v2
        with:
          go-version: '1.16.4'
      - name: Restore go build cache
        uses: actions/cache@v1
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-v1-${{ github.run_id }}
      - name: Download all Go modules
        run: |
          go mod download
      - name: Compile all packages
        run: make build

  lint-go:
    name: Lint Go code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.29

  # test-go:
  #   name: Run unit tests for Go packages
  #   env:
  #     GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  #     GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
  #   runs-on: ubuntu-latest
  #   needs:
  #     - build-go
  #   steps:
  #     - name: Create checkout directory
  #       run: mkdir -p ~/go/src/github.com/argoproj-labs
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #     - name: Create symlink in GOPATH
  #       run: ln -s $(pwd) ~/go/src/github.com/argoproj-labs
  #     - name: Setup Golang
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: '1.16.4'
  #     - name: Install required packages
  #       run: |
  #         sudo apt-get install git -y
  #     - name: Switch to temporal branch so we re-attach head
  #       run: |
  #         git switch -c temporal-pr-branch
  #         git status
  #     - name: Fetch complete history for blame information
  #       run: |
  #         git fetch --prune --no-tags --depth=1 origin +refs/heads/*:refs/remotes/origin/*
  #     - name: Add ~/go/bin to PATH
  #       run: |
  #         echo "/home/runner/go/bin" >> $GITHUB_PATH
  #     - name: Add /usr/local/bin to PATH
  #       run: |
  #         echo "/usr/local/bin" >> $GITHUB_PATH
  #     - name: Restore go build cache
  #       uses: actions/cache@v1
  #       with:
  #         path: ~/.cache/go-build
  #         key: ${{ runner.os }}-go-build-v1-${{ github.run_id }}
  #     - name: Setup git username and email
  #       run: |
  #         git config --global user.name "John Doe"
  #         git config --global user.email "john.doe@example.com"
  #     - name: Download and vendor all required packages
  #       run: |
  #         go mod download
  #     - name: Run all unit tests
  #       run: make unit-tests
  #     - name: Generate code coverage artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: code-coverage
  #         path: coverage.out
  #     - name: Generate test results artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: test-results
  #         path: test-results/

  test-e2e:
    name: Run end-to-end tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout latest ArgoCD Code
        uses: actions/checkout@v2
        with:
          repository: argoproj/argo-cd
          # Pin a specific commit to prevent Argo CD regressions from impacting us:
          # This version is verified to match a version consistent with the kustomize install yaml,
          # by 'hack/verify-argo-cd-versions.sh'.
          # BEGIN-ARGO-CD-VERSION
          ref: v2.0.0
          # END-ARGO-CD-VERSION
      - name: Set-up Golang
        uses: actions/setup-go@v2
        with:
          go-version:
            '1.16.4'
      - name: Set-up k3s cluster
        uses: debianmaster/actions-k3s@master
        id: k3s
        with:
          version: 'latest'
      - name: Restore go build cache
        uses: actions/cache@v1
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-v1-${{ github.run_id }}
      - name: Add ~/go/bin to PATH
        run: |
          echo "/home/runner/go/bin" >> $GITHUB_PATH
      - name: Add /usr/local/bin to PATH
        run: |
          echo "/usr/local/bin" >> $GITHUB_PATH
      - name: Download Go dependencies
        run: |
          go mod download
          go get github.com/mattn/goreman
      - name: Setup git username and email
        run: |
          git config --global user.name "John Doe"
          git config --global user.email "john.doe@example.com"
      - name: Run e2e tests
        run: |
          make test-e2e
      - name: Generate code coverage artifacts
        uses: actions/upload-artifact@v2
        with:
          name: appsource-e2e-coverage
          path: appsource-e2e-coverage.out
      - name: Generate test results artifacts
        uses: actions/upload-artifact@v2
        with:
          name: argocd-e2e-test-results
          path: argocd-e2e-test-results
